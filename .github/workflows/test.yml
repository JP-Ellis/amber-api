---
name: test

permissions:
  contents: read

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Generic
  FORCE_COLOR: '1'
  CLICOLOR: '1'
  # Python
  PYTHONUNBUFFERED: '1'
  STABLE_PYTHON_VERSION: '3.13'
  # Rust
  RUST_BACKTRACE: '1'
  NEXTEST_PROFILE: ci

jobs:
  # This job checks if the necessary checks have been completed and is used by
  # GitHub's rules to determine if the PR can be merged. This more convenient
  # than specifying each individual check in the GitHub UI.
  complete:
    name: Test completion check
    if: always()

    permissions:
      contents: none

    runs-on: ubuntu-latest
    needs:
      - pre-commit
      - clippy
      - format
      - coverage
      - test
      - examples

    steps:
      - name: Failed
        run: exit 1
        if: >
          contains(needs.*.result, 'failure')
          || contains(needs.*.result, 'cancelled')
          || contains(needs.*.result, 'skipped')

  ##############################################################################
  ## Checks
  ##############################################################################

  committed:
    name: Committed

    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0
        with:
          fetch-depth: 0

      - name: committed-action
        uses: crate-ci/committed@15229711f8f597474c0b636f327cde5969f9a529  # v1.1.7
        with:
          args: -vv --no-merge-commit --no-wip --no-fixup

  pre-commit:
    name: Pre-commit

    runs-on: ubuntu-latest

    env:
      PRE_COMMIT_HOME: ${{ github.workspace }}/.pre-commit

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Cache pre-commit
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830  # v4.3.0
        with:
          path: |
            ${{ env.PRE_COMMIT_HOME }}
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt,clippy

      - name: Set up uv
        uses: astral-sh/setup-uv@b75a909f75acd358c2196fb9a5f1299a9a8868a4  # v6.7.0
        with:
          enable-cache: true
          cache-suffix: pre-commit
          cache-dependency-glob: .pre-commit-config.yaml

      - name: Install pre-commit
        run: uv tool install pre-commit

      - name: Run pre-commit
        run: pre-commit run --show-diff-on-failure --color=always --all-files

  clippy:
    name: Clippy Rust ${{ matrix.rust }} on  ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
        rust:
          - stable
    continue-on-error: ${{ matrix.rust != 'stable' }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy

      - name: Cache Rust
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  # v2.8.1

      - name: Install Rust tools
        uses: taiki-e/install-action@d6912b47771be2c443ec90dbb3d28e023987e782  # v2.62.1
        with:
          tool: cargo-hack,cargo-action-fmt

      - name: Clippy
        run: |
          {
            cargo hack \
              --feature-powerset \
              --no-dev-deps \
              clippy \
              --workspace \
              --message-format json \
              -- \
              -D warnings

            cargo hack \
              --feature-powerset \
              clippy \
              --workspace \
              --all-targets \
              --message-format json \
              -- \
              -D warnings
           } | cargo-action-fmt

  format:
    name: Format Rust ${{ matrix.rust }} on  ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
        rust:
          - stable
    continue-on-error: ${{ matrix.rust != 'stable' }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt

      - name: Cache Rust
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  # v2.8.1

      - name: Format
        run: cargo fmt --check

  coverage:
    name: Rust Coverage

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  # v2.8.1

      - name: Install Rust tools
        uses: taiki-e/install-action@d6912b47771be2c443ec90dbb3d28e023987e782  # v2.62.1
        with:
          tool: cargo-tarpaulin

      - name: Run cargo tarpaulin
        env:
          AMBER_API_KEY: ${{ secrets.AMBER_API_KEY }}
        run: cargo tarpaulin --out Xml

      - name: Upload Rust coverage artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        with:
          name: rust-coverage
          path: '**/cobertura.xml'
          if-no-files-found: warn

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7  # v5.5.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  test:
    name: Test Rust ${{ matrix.rust }} on  ${{ startsWith(matrix.os, 'macos-') && 'macOS' || startsWith(matrix.os, 'windows-') && 'Windows' || 'Linux' }}

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        rust:
          - stable
        include:
          - os: ubuntu-latest
            rust: beta
    continue-on-error: ${{ matrix.rust != 'stable' }}

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache Rust
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  # v2.8.1

      - name: Install Rust tools
        uses: taiki-e/install-action@d6912b47771be2c443ec90dbb3d28e023987e782  # v2.62.1
        with:
          tool: cargo-hack,nextest

      - name: Run tests
        shell: bash
        env:
          NEXTEST_EXPERIMENTAL_LIBTEST_JSON: '1'
          AMBER_API_KEY: ${{ secrets.AMBER_API_KEY }}
        run: |-
          while IFS=$'\n' read -r line || ! retval=$line; do
            if ! echo "$line" | jq -e . 2>/dev/null 1>&2; then
              continue
            fi

            type=$(echo "$line" | jq -r '.type')
            event=$(echo "$line" | jq -r '.event')
            if [ "$type" != "test" ] || [ "$event" != "failed" ]; then
              continue
            fi

            echo "Found failed test: $line"

            failed=true
            name=$(echo "$line" | jq -r '.name')
            stdout=$(echo "$line" | jq -r '.stdout')

            {
              echo "## Failed test $name"
              echo '```'
              echo "$stdout"
              echo '```'
            } >>"$GITHUB_STEP_SUMMARY"
          done < <(
            cargo hack nextest run \
              --feature-powerset \
              --workspace \
              --message-format libtest-json
            printf '%s' "$?"
          )

          exit "$retval"

  examples:
    name: Examples

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8  # v5.0.0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy,rustfmt

      - name: Cache Rust
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1  # v2.8.1

      - name: Install Rust tools
        uses: taiki-e/install-action@d6912b47771be2c443ec90dbb3d28e023987e782  # v2.62.1
        with:
          tool: cargo-hack,cargo-action-fmt

      - name: Run examples
        run: |-
          {
            cargo hack run --example --workspace --message-format json -- \
              -D warnings

            cargo hack run --example --workspace --all-targets --message-format json -- \
              -D warnings
          } | cargo-action-fmt
